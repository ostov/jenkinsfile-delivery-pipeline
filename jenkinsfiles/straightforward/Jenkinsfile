def APP_VERSION = ''
def APP_BUILD = ''
def randomIntInRange(int lowerInt, int upperInt) {
    return Math.abs( new Random().nextInt() % (upperInt - lowerInt) ) + lowerInt
}

pipeline {
    options {
        authorizationMatrix([])
        buildDiscarder logRotator(
            artifactDaysToKeepStr: '',
            artifactNumToKeepStr: '',
            daysToKeepStr: '30',
            numToKeepStr: ''
        )
        copyArtifactPermission env.JOB_NAME
        ansiColor('xterm')
        timestamps()
    }
    agent none
    stages {

        stage("Build & Test") {
            options {
                timeout(time: 20, unit: 'MINUTES')
            }
            agent { label 'CI' }
            steps {
                checkout scm: [$class: 'GitSCM',
                    branches: [[name: "refs/heads/master"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'WipeWorkspace']],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        url: 'https://github.com/ostov/jenkinsfile-delivery-pipeline.git',
                        refspec: '+refs/heads/master:refs/remotes/origin/master',
                    ]]
                ]
                script {
                    env.APP_VERSION = sh (
                        script: 'cat version.properties | grep "APP_VERSION" | awk -F\'[=.]\' \'{print $2 "." $3;}\'',
                        // For Maven use 'xq -r .project.version pom.xml | awk -F\'[.]\' \'{print $1 "." $2;}\''
                        // For Node.js use 'jq -r '.version' package.json | awk -F\'[.]\' \'{print $1 "." $2;}\''
                        returnStdout: true
                    ).trim()
                    env.APP_BUILD = env.BUILD_NUMBER
                    currentBuild.displayName = "${env.APP_VERSION}.${env.APP_BUILD}"
                }
                echo "Build & Test"
                sh '''
                    echo "[INFO] Updating version with build number ..."
                    # For Maven use goal "versions:set -DnewVersion=${APP_VERSION}.${APP_BUILD_NUMBER}"
                    # For Node.js use 'sed -i "s/\"version\": \"${APP_VERSION}.*\"/\"version\": \"${APP_VERSION}.${BUILD_NUMBER}\"/g" package.json'
                    echo "[INFO] Starting Build & Test ..."
                    echo "${APP_VERSION}.${BUILD_NUMBER}" > artifact.txt
                    mkdir -p target/test-results/test
                    chmod +x run_tests.sh
                    ./run_tests.sh FooBar
                '''
                sleep randomIntInRange(5,15)
                archiveArtifacts artifacts: 'artifact.txt',
                    allowEmptyArchive: false,
                    fingerprint: true,
                    onlyIfSuccessful: true
            }
            post {
                always {
                    // recordIssues enabledForFailure: true, tools: [mavenConsole(), checkStyle()]
                    junit skipPublishingChecks: true, testResults: '**/target/test-results/**/TEST*.xml'
                    // jacoco classPattern: '**/target/classes', exclusionPattern: '**/*Test*.class', execPattern: '**/target/jacoco/**/*.exec', inclusionPattern: '**/*.class', sourceInclusionPattern: '**/*.java'
                    milestone 1
                }
            }
        }

        stage("Deploy to DevInt") {
            options {
                skipDefaultCheckout()
                timeout(time: 10, unit: 'MINUTES')
            }
            environment {
                envName = "DevInt"
            }
            agent { label env.envName }
            steps {
                lock(resource: env.envName, inversePrecedence: true) {
                    milestone 2
                    script { currentBuild.displayName = "${env.APP_VERSION}.${env.APP_BUILD}" }
                    cleanWs()
                    copyArtifacts filter: 'artifact.txt', fingerprintArtifacts: true, projectName: env.JOB_NAME, selector: specific(env.BUILD_NUMBER)
                    echo "Deploying ${env.APP_VERSION}.${env.APP_BUILD} to ${env.envName}"
                    sh '''
                        echo "[INFO] Deploying to ${envName} ..."
                        cat artifact.txt
                    '''
                }
                milestone 3
            }
        }

        stage("Tests on DevInt") {
            options {
                skipDefaultCheckout()
                timeout(time: 15, unit: 'MINUTES')
            }
            environment {
                envName = "DevInt"
            }
            agent { label env.envName }
            steps {
                lock(resource: env.envName, inversePrecedence: true) {
                    milestone 4
                    script { currentBuild.displayName = "${env.APP_VERSION}.${env.APP_BUILD}" }
                    checkout scm: [$class: 'GitSCM',
                        branches: [[name: "refs/heads/master"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'WipeWorkspace']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                            url: 'https://github.com/ostov/jenkinsfile-delivery-pipeline.git',
                            refspec: '+refs/heads/master:refs/remotes/origin/master',
                        ]]
                    ]
                    echo "Testing on ${env.envName}"
                    sh '''
                        echo "[INFO] Testing ${APP_VERSION}.${APP_BUILD} on ${envName} ..."
                        mkdir -p target/test-results/test
                        chmod +x run_tests.sh
                        ./run_tests.sh
                    '''
                }
            }
            post {
                always {
                    junit skipPublishingChecks: true, testResults: '**/target/test-results/**/TEST*.xml'
                    // jacoco classPattern: '**/target/classes', exclusionPattern: '**/*Test*.class', execPattern: '**/target/jacoco/**/*.exec', inclusionPattern: '**/*.class', sourceInclusionPattern: '**/*.java'
                    milestone 5
                }
            }
        }

        stage("Deploy to QA") {
            options {
                skipDefaultCheckout()
                timeout(time: 10, unit: 'MINUTES')
            }
            input {
                message "Should we continue?"
                ok "Yes, we should"
                submitter "Calavista*Calavista DevOps,marko-bekhta"
            }
            environment {
                envName = "QA"
            }
            agent { label env.envName }
            steps {
                lock(resource: env.envName, inversePrecedence: true) {
                    milestone 6
                    script { currentBuild.displayName = "${env.APP_VERSION}.${env.APP_BUILD}" }
                    cleanWs()
                    copyArtifacts filter: 'artifact.txt', fingerprintArtifacts: true, projectName: env.JOB_NAME, selector: specific(env.BUILD_NUMBER)
                    echo "Deploying ${env.APP_VERSION}.${env.APP_BUILD} to ${env.envName}"
                    sh '''
                        echo "[INFO] Deploying to ${envName} ..."
                        cat artifact.txt
                    '''
                }
                milestone 7
            }
        }

        stage("Tests on QA") {
            options {
                skipDefaultCheckout()
                timeout(time: 30, unit: 'MINUTES')
            }
            environment {
                envName = "QA"
            }
            agent { label env.envName }
            steps {
                lock(resource: env.envName, inversePrecedence: true) {
                    milestone 8
                    script { currentBuild.displayName = "${env.APP_VERSION}.${env.APP_BUILD}" }
                    checkout scm: [$class: 'GitSCM',
                        branches: [[name: "refs/heads/master"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'WipeWorkspace']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                            url: 'https://github.com/ostov/jenkinsfile-delivery-pipeline.git',
                            refspec: '+refs/heads/master:refs/remotes/origin/master',
                        ]]
                    ]
                    echo "Testing on ${env.envName}"
                    sh '''
                        echo "[INFO] Testing ${APP_VERSION}.${APP_BUILD} on ${envName} ..."
                        mkdir -p target/test-results/test
                        chmod +x run_tests.sh
                        ./run_tests.sh Bar
                    '''
                }
            }
            post {
                always {
                    junit skipPublishingChecks: true, testResults: '**/target/test-results/**/TEST*.xml'
                    // jacoco classPattern: '**/target/classes', exclusionPattern: '**/*Test*.class', execPattern: '**/target/jacoco/**/*.exec', inclusionPattern: '**/*.class', sourceInclusionPattern: '**/*.java'
                    milestone 9
                }
            }
        }

        stage("Deploy to Staging") {
            options {
                skipDefaultCheckout()
                timeout(time: 14, unit: 'DAYS')
            }
            input {
                message "Should we continue?"
                ok "Yes, we should"
                submitter "Calavista*Calavista DevOps,marko-bekhta"
            }
            environment {
                envName = "Staging"
            }
            agent { label env.envName }
            steps {
                lock(resource: env.envName, inversePrecedence: true) {
                    milestone 10
                    script { currentBuild.displayName = "${env.APP_VERSION}.${env.APP_BUILD}" }
                    cleanWs()
                    copyArtifacts filter: 'artifact.txt', fingerprintArtifacts: true, projectName: env.JOB_NAME, selector: specific(env.BUILD_NUMBER)
                    echo "Deploying to ${env.envName}"
                    sh '''
                        echo "[INFO] Deploying ${APP_VERSION}.${APP_BUILD} to ${envName} ..."
                        cat artifact.txt
                    '''
                }
                milestone 11
            }
        }

        stage("Deploy to Production") {
            options {
                skipDefaultCheckout()
                timeout(time: 14, unit: 'DAYS')
            }
            input {
                message "Should we continue?"
                ok "Yes, we should"
                submitter "Calavista*Calavista DevOps,marko-bekhta"
            }
            environment {
                envName = "Production"
            }
            agent { label env.envName }
            steps {
                lock(resource: env.envName, inversePrecedence: true) {
                    milestone 12
                    script { currentBuild.displayName = "${env.APP_VERSION}.${env.APP_BUILD}" }
                    cleanWs()
                    copyArtifacts filter: 'artifact.txt', fingerprintArtifacts: true, projectName: env.JOB_NAME, selector: specific(env.BUILD_NUMBER)
                    echo "Deploying ${env.APP_VERSION}.${env.APP_BUILD} to ${env.envName}"
                    sh '''
                        echo "[INFO] Deploying ${APP_VERSION}.${APP_BUILD} to ${envName} ..."
                        cat artifact.txt
                    '''
                }
            }
        }

    }
}
