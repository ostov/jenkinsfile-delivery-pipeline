library identifier: 'ostov-library@master', retriever: modernSCM([
  $class: 'GitSCMSource',
  remote: 'https://github.com/ostov/jenkinsfile-delivery-pipeline-lib.git'
])

// Or use library described in System Configuration
//@Library('ostov-library') _

def APP_VERSION = ''
def APP_BUILD = ''
def randomIntInRange(int lowerInt, int upperInt) {
    return Math.abs( new Random().nextInt() % (upperInt - lowerInt) ) + lowerInt
}

pipeline {
    options {
        authorizationMatrix([])
        buildDiscarder logRotator(
            artifactDaysToKeepStr: '',
            artifactNumToKeepStr: '',
            daysToKeepStr: '30',
            numToKeepStr: ''
        )
        skipDefaultCheckout()
        copyArtifactPermission env.JOB_NAME
        ansiColor('xterm')
        timestamps()
    }
    agent none
    stages {

        stage("Build & Test") {
            options {
                timeout(time: 20, unit: 'MINUTES')
            }
            agent { label 'CI' }
            steps {
                checkoutScmGit('https://github.com/ostov/jenkinsfile-delivery-pipeline.git')
                script {
                    env.APP_VERSION = sh (
                        script: 'cat version.properties | grep "APP_VERSION" | awk -F\'[=.]\' \'{print $2 "." $3;}\'',
                        // For Maven use 'xq -r .project.version pom.xml | awk -F\'[.]\' \'{print $1 "." $2;}\''
                        // For Node.js use 'jq -r '.version' package.json | awk -F\'[.]\' \'{print $1 "." $2;}\''
                        returnStdout: true
                    ).trim()
                    env.APP_BUILD = env.BUILD_NUMBER
                    currentBuild.displayName = "${env.APP_VERSION}.${env.APP_BUILD}"
                }
                echo "Build & Test"
                sh '''
                    echo "[INFO] Updating version with build number ..."
                    # For Maven use goal "versions:set -DnewVersion=${APP_VERSION}.${APP_BUILD}"
                    # For Node.js use 'sed -i "s/\"version\": \"${APP_VERSION}.*\"/\"version\": \"${APP_VERSION}.${APP_BUILD}\"/g" package.json'
                    echo "[INFO] Starting Build & Test ..."
                    echo "${APP_VERSION}.${APP_BUILD}" > artifact.txt
                    mkdir -p target/test-results/test
                    chmod +x run_tests.sh
                    ./run_tests.sh FooBar
                '''
                sleep randomIntInRange(5,15)
                archiveArtifacts artifacts: 'artifact.txt',
                    allowEmptyArchive: false,
                    fingerprint: true,
                    onlyIfSuccessful: true
            }
            post {
                always {
                    // recordIssues enabledForFailure: true, tools: [mavenConsole(), checkStyle()]
                    junit skipPublishingChecks: true, testResults: '**/target/test-results/**/TEST*.xml'
                    // jacoco classPattern: '**/target/classes', exclusionPattern: '**/*Test*.class', execPattern: '**/target/jacoco/**/*.exec', inclusionPattern: '**/*.class', sourceInclusionPattern: '**/*.java'
                    milestone 1
                }
            }
        }

        stage("Deploy to DevInt") {
            options {
                timeout(time: 10, unit: 'MINUTES')
            }
            agent { label 'DevInt' }
            steps {
                deploySteps([ "envName": "DevInt", "lockMilestone": 2, "doneMilestone": 3 ])
            }
        }

        stage("Tests on DevInt") {
            options {
                timeout(time: 15, unit: 'MINUTES')
            }
            agent { label 'DevInt' }
            steps {
                testSteps([
                    "envName": "DevInt",
                    "lockMilestone": 4,
                    "gitURL": "https://github.com/ostov/jenkinsfile-delivery-pipeline.git",
                    "testName": "Foo"
                ])
            }
            post {
                always {
                    junit skipPublishingChecks: true, testResults: '**/target/test-results/**/TEST*.xml'
                    // jacoco classPattern: '**/target/classes', exclusionPattern: '**/*Test*.class', execPattern: '**/target/jacoco/**/*.exec', inclusionPattern: '**/*.class', sourceInclusionPattern: '**/*.java'
                    milestone 5
                }
            }
        }

        stage("Deploy to QA") {
            options {
                timeout(time: 1, unit: 'DAYS')
            }
            input {
                message "Should we continue?"
                ok "Yes, we should"
                submitter "ostov"
            }
            agent { label 'QA' }
            steps {
                deploySteps([ "envName": "QA", "lockMilestone": 6, "doneMilestone": 7 ])
            }
        }

        stage("Tests on QA") {
            options {
                timeout(time: 45, unit: 'MINUTES')
            }
            agent { label 'QA' }
            steps {
                testSteps([
                    "envName": "QA",
                    "lockMilestone": 8,
                    "gitURL": "https://github.com/ostov/jenkinsfile-delivery-pipeline.git",
                    "testName": "Bar"
                ])
            }
            post {
                always {
                    junit skipPublishingChecks: true, testResults: '**/target/test-results/**/TEST*.xml'
                    // jacoco classPattern: '**/target/classes', exclusionPattern: '**/*Test*.class', execPattern: '**/target/jacoco/**/*.exec', inclusionPattern: '**/*.class', sourceInclusionPattern: '**/*.java'
                    milestone 9
                }
            }
        }

        stage("Deploy to Staging") {
            options {
                timeout(time: 14, unit: 'DAYS')
            }
            input {
                message "Should we continue?"
                ok "Yes, we should"
                submitter "ostov"
            }
            agent { label 'Staging' }
            steps {
                deploySteps([ "envName": "Staging", "lockMilestone": 10, "doneMilestone": 11 ])
            }
        }

        stage("Deploy to Production") {
            options {
                timeout(time: 14, unit: 'DAYS')
            }
            input {
                message "Should we continue?"
                ok "Yes, we should"
                submitter "ostov"
            }
            agent { label 'Production' }
            steps {
                deploySteps([ "envName": "Production", "lockMilestone": 12, "doneMilestone": 13 ])
            }
        }

    }
}
